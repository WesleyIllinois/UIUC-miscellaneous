# -*- coding: utf-8 -*-
"""Copy of Assignment9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QjqyYGnxfInCUqrazmsa0E7Ox3EtFuMz

# CS 498: Fundamentals of Computer Science I
## Assignment #9

**Due:** Fri., Nov. 6th by 11:59pm

**Directions:** Please upload your completed Colab notebook to Compass by the deadline

## Problem 1: Four is magic.

Write a program that given an integer from 0 to 1,000 does the "4 is magic" transformation. The steps are as follows.

1. Convert the integer $n$ into English and count the number of letters. Do not count whitespace characters. Below are a few examples.

integer | English name | letters 
:---:|:---|:---:
21 | twenty one | 9
102 | one hundred two | 16
1000 | one thousand | 11

2. Let `length` be the length of the English word equivalent for the integer $n$. 

    * If `length` is 4, output "four is magic." Then, terminate the transformation process.

    * Otherwise output ```<English word equivalent of integer n> is <length>.``` Here, we replace the information in <...> with the appropriate text. See examples below.

3. Report step 1, where the integer $n$ is set to `length`. For example, if $n = 102$, then output ```one hundred and two is 16.``` Set $n = 16$. Then, repeat step (a).

For example, suppose the user inputs the intger 83, then the transformation process proceeds as follows.

* **eighty three is 11.** $\rightarrow$ eight three is the 11-letter English word equivalent of 83.

* **eleven is 6.** $\rightarrow$ eleven is the 6-letter English word equivalent of 11.

* **six is 3.** $\rightarrow$ six is the 3-letter English word equivalent of 6.

* **three is 5.** $\rightarrow$ three is the 5-letter English word equivalent of 3.

* **five is 4.** $\rightarrow$ five is the 4-letter English word equivalent of 5.

* **four is magic.**

### Examples

**Example #1**

The user enters the integer 83 (line 1). Afterwards, the program outputs the transformation process (lines 3-8).
```
Number: 83

eighty three is 11.
eleven is 6.
six is 3.
three is 5.
five is 4.
four is magic.
```

**Example #2**

The user enters the integer 102 (line 1). Afterwards, the program outputs the transformation process (lines 3-8).
```
Number: 102

one hundred and two is 16.
sixteen is 7.
seven is 5.
five is 4.
four is magic.

### Problem 2.1: Your code.

As stated in the instructions, your code must work for the integers 0 to 1000. You may go beyond this limit if you wish.
"""



def main(num):
  """
    Returns a string with the equivalent English text of a number between 0 and 1,000,0000.

    Parameters:
        int_num (int): an integer between 0 and 1,000,000

    Returns:
        str: a string that is the english words for a number.

    Examples:
        main(50) returns the string "fifty"
        main(833) returns the string "eight hundred thirty three"
  """

  

  one_digit_english_list = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
  anotherlist = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy',	'eighty', 'ninety']

  def ones_into_english():
      """
      Returns a string with the equivalent English word of the ones place.

      Returns:
          str: a string representing a digit

      Examples:
          0000004 returns the string "four"

      """

      
      one_digit_english_list = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']


      if string == '0000000':
        return 'zero'  
      if string[-2] == '1':
        return one_digit_english_list[0]
      else:
        for digit in string[-1]:
          return one_digit_english_list[int(digit)]



  def tens_into_english():
      """
      Returns a string with the equivalent English words of the number in the tens place.

      Returns:
          str: a string representing a tens place integer

      Examples:
          0000040 returns string 'forty'
      """
  

      listofnumbersinteens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']
      anotherlist = ['twenty ', 'thirty ', 'forty ', 'fifty ', 'sixty ', 'seventy ',	'eighty ', 'ninety ']

      if string[-2] == '0':
        return ''
      if string[-2] == '1':
        for digit in string[-1]:
          return listofnumbersinteens[int(digit)]
      else:
        for digit in string[-2]:
          return anotherlist[int(digit) - 2]

  def hundreds_into_english():
      """
      Returns a string with the equivalent English words of the number in the hundreds place.

      Returns:
          str: a string representing a hundreds place integer

      Examples:
          0000400 returns string 'four hundred'
      """
    

      listofnumbershundreds = ['one hundred ', 'two hundred ', 'three hundred ', 'four hundred ', 'five hundred ', 'six hundred ', 'seven hundred ', 'eight hundred ', 'nine hundred ']
      anotherlist = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy',	'eighty', 'ninety']

      
      if string[-3] == '0':
        return ''
      for digit in string[-3]:
        return listofnumbershundreds[int(digit)- 1]

  def thousands_into_english():
      """
      Returns a string with the equivalent English words of the number in the thousands place.

      Returns:
          str: a string representing a thousands place integer

      Examples:
          0004000 returns string 'four thousand'
      """

      
      thousand = ' thousand '

      if string[-4] == '0':
        return ''
      elif string[4:] != '000':
        for digit in string[-4]:
          return one_digit_english_list[int(digit)] + ' thousand and '
      else:
        for digit in string[-4]:
          return one_digit_english_list[int(digit)] + thousand
      

  def tens_of_thousands_into_english():
      """
      Returns a string with the equivalent English words of the number in the tens of thousands place.

      Returns:
          str: a string representing a tens of thousands place integer

      Examples:
          0040000 returns string 'forty thousand'
      """



      tenthousand = ' thousand '

      if string[-5] == '0':
        return ''
      elif string[-4] == '0':
        for digit in string[-5]:
          return anotherlist[int(digit) - 2] + tenthousand
      else:
        for digit in string[-5]:
          return anotherlist[int(digit) - 2] + ' '
      

  def hundreds_of_thousands_into_english():
      """
      Returns a string with the equivalent English words of the number in the hundreds of thousand place.

      Returns:
          str: a string representing a tens place integer

      Examples:
          0400000 returns string 'four hundred thousand'
      """

      hundredthousand = ' hundred thousand '

      if string[-6] == '0':
        return ''
      elif string[-5] == '0':
        for digit in string[-6]:
          return one_digit_english_list[int(digit)] + hundredthousand
      else:
        for digit in string[-6]:
          return one_digit_english_list[int(digit)] + ' hundred '


  def millions_into_english():
      """
      Returns a string with the equivalent English words of the number in the millions place.

      Returns:
          str: a string representing a millions place integer

      Examples:
          4000000 returns string 'four million'
      """

      if string[-7] == '0':
        return ''
      for digit in string[-7]:
        return one_digit_english_list[int(digit)] + ' million '


  strin = str(num)
  amount = 0
  add = ''
  amount = 7 - len(strin)
  add += '0'*amount
  string = add + strin

  mylist = ''

  mylist += millions_into_english()
  mylist += hundreds_of_thousands_into_english()
  mylist += tens_of_thousands_into_english()
  mylist += thousands_into_english()
  mylist += hundreds_into_english()
  mylist += tens_into_english()
  mylist += ones_into_english()


  return mylist

# Add your code. 


def magic_four(num):

  
  S = [num]
  
  
  while len(S) < 1000:
    if len(str(str(main(S[-1])))) == 4:
      return print('four is magic')
    else:
      numbrstr = main(S[-1])
      x = len(str(numbrstr))
      print(numbrstr, 'is', x)
      S.append(x) 

  print(S)

magic_four(22)

"""### Problem 2.2: Testing your code.

Provide an explanation of the methodology used to test your code. If relevant to how you defined your functions, also make sure to show the appropriate assert statements.

## **Problem 2**: Yahtzee

In Yahtzee, you roll five dice and then use those dice to make certain combinations. For example, the Yahtzee combination is formed by all five dice having the same value. A large straight occurs when all of the dice are in consecutive order (e.g., 1, 2, 3, 4, 5 or 2, 3, 4, 5, 6). If you havenâ€™t played Yahtzee, you can find out more from various online sources such as Wikipedia.

Once the five dice are rolled, the following seven hands in Yahtzee are of interest.
* **Yahtzee**: all five dice show the same value
* **Four of a kind (but not Yahtzee)**: four dice showing the same value
* **Three of a kind (but not four of a kind, full house, or Yahtzee)**: three dice showing the same value
* **Full house (but not three of a kind)**: three of a kind and a pair
* **Large straight**: five sequential dice
* **Small straight (but not large straight)**: four sequential dice
* **None**: none of the above combinations

### Problem 2.1: Your goal

You are responsible for writing and testing the functions representing the different Yahtzee hands. You can add any additional user-defined functions you may need to complete your program.

Scaffolding code has been provided. The `roll_dice()` function has been written for you. `roll_dice()` returns a list of 5 random integers between 1 and 6. For example, the list [2, 3, 6, 6, 1], says that the first die has a face value of 2, the second die has a face value of 3, the third die has a face value of 6, etc.

**Hint:** Take advantage of sets when writing your code for this problem.
"""

for n in range(5):
  print(n)

import random

def roll_dice():
    '''
    Returns 5 randomly rolled dice.
    
    Parameters:
        None

    Returns:
        int list: represents the die faces of the 5 rolled dice
    '''
    dice = []
    for i in range(5):
        dice += [random.randint(1,6)]
        dice.sort()
    return dice

def yahtzee(dice):
    ''' 
    Returns True or False if the dice represent Yahtzee
    
    Parameters:
        dice (int list): a list representing 5 dice faces 
        
    Returns:
        bool: represents whether dice represent Yahtzee
    
    Examples:
        yahtzee([3,3,3,3,3]) returns True
        yahtzee([1,1,2,1,1]) returns False
    '''
    # add your code

    dice_set = set(dice)

    if len(dice_set) == 1:
      return True 
    else:
      return False 


def four_of_a_kind(dice):
    ''' 
    Returns True or False if the dice are four of a kind. 
    
    Parameters:
        dice (int list): a list representing 5 dice faces 

    Returns:
        bool: represents whether dice are four of a kind
    
    Examples:
        four_of_a_kind([1,1,2,1,1]) returns True
        four_of_a_kind([3,3,3,3,3]) returns False 
    '''


    # add your code
    dice_set = list(set(dice))
    check_list = []
    extra = 
    if len(dice_set) == 2:
      for n in range(5):
        x = n
        q = 1  
        while q != -1:
          if x + 1 < 5:
            if dice[x+1] == dice[x]:
              q += 1 
              x += 1
              if q > extra:
                extra = q
            else:
              q = -1
          else:
            q = -1
        if extra == 3:
          return True
    else:
      return False


def full_house(dice):
    '''
    Returns True of False if the dice are a full house.

    Parameters:
        dice (int list): a list representing 5 dice faces 

    Returns:
        bool: represents whether dice are a full house
    
    Examples:
        full_house([1,1,2,2,1]) returns True
        full_house([3,6,6,5,6]) returns False 
    '''
    # add your code
    dice_set = list(set(dice))
    check_list = []
    extra = 1
    if len(dice_set) == 2:
      for n in range(5):
        x = n
        q = 1
        while q != -1:
          if x + 1 < 5:
            if dice[x+1] == dice[x]:
              q += 1 
              x += 1
              if q > extra:
                extra = q
            else:
              q = -1
          else:
            q = -1
      if extra == 3:
        return True
    else:
      return False


def three_of_a_kind(dice):
    '''
    Returns True or False if the dice are three of a kind.
    
    Parameters:
        dice (int list): a list representing 5 dice faces 

    Returns:
        bool: represents whether dice are three of a kind

    Examples:
        three_of_a_kind([6,4,4,2,4]) returns True
        three_of_a_kind([1,1,2,2,1]) returns False 
    '''
    # add your code
    dice_set = list(set(dice))
    check_list = []
    extra = 1
    if len(dice_set) == 3:
      for n in range(5):
        x = n
        q = 1
        while q != -1:
          if x + 1 < 5:
            if dice[x+1] == dice[x]:
              q += 1 
              x += 1
              if q > extra:
                extra = q
            else:
              q = -1
          else:
            q = -1
        if extra == 3:
          return True
        elif extra == 1:
          return True
        else:
          return False

    else:
      return False

 
def large_straight(dice):
    ''' 
    Returns True or False if the dice represent a large straight. 

    Parameters:
        dice (int list): a list representing 5 dice faces 

    Returns:
        bool: represents whether dice represent a large straight 

    Examples:
        large_straight([5,4,2,1,3]) returns True
        large_straight([6,4,3,5,1]) returns False 
    '''
    # add your code
    dice_set = set(dice)

    if len(dice_set) == 5:
      if dice[0] == 1 and dice[-1] == 5 or dice[0] == 2 and dice[-1] == 6:
        return True 
      else:
        return False 
    else:
      return False

def small_straight(dice):
    ''' 
    Returns True or False if the dice represent a small straight. 
    
    Parameters:
        dice (int list): a list representing 5 dice faces 

    Returns:
        bool: represents whether dice represent a small straight
    Examples:
        small_straight([6,4,3,5,1]) returns True 
        small_straight([5,4,2,1,3]) returns False 
    '''
    # add your code
    dice_set = set(dice)
    p = 1
    for n in range(5):
      x = n
      q = 1
      while x != -1:
        if x + 1 < 5:
          if int(dice[x + 1]) - int(dice[x]) == 1:
            q += 1
            x += 1
          elif int(dice[x + 1]) == int(dice[x]):
            x += 1
          else:
            x = -1
        else:
          x = -1
        if q > p:
          p = q
    if p == 4:
      return True
    else:
      return False
    




def none(dice):
    ''' 
    Returns True or False if the dice are none of the Yahtzee combinations.

    Parameters:
        dice (int list): a list representing 5 dice faces 

    Returns:
        bool: represents whether dice are none of the Yahtzee combinations
    Examples:
        none([1,3,2,2,6]) returns True
        none([3,3,3,3,3]) returns False 
    '''
    # add your code
    if yahtzee(dice) == False and four_of_a_kind(dice) == False and three_of_a_kind(dice) == False and full_house(dice) == False and large_straight(dice) == False and small_straight(dice) == False:
      return True
    else:
      return False

four_of_a_kind([1,1,2,1,1])

"""### Problem 2.2: Testing your code.

Add assert statements to test your  user-defined functions as appropriate. You can use as many code cells that you need to perform your tests.
"""

# Add your tests.
assert yahtzee([3,1,2,2,2]) == False
assert yahtzee([2,2,2,2,2]) == True
assert four_of_a_kind([2,1,2,2,2]) == True
assert four_of_a_kind([3,1,2,2,2]) == False
assert three_of_a_kind([1,2,2,2,3]) == True
assert three_of_a_kind([3,2,2,2,2]) == False
assert full_house([3,1,2,2,2]) == False
assert full_house([1,1,2,2,2]) == True
assert large_straight([1,2,3,4,5]) == True
assert large_straight([3,1,2,2,2]) == False
assert small_straight([1,3,4,5,6]) == True
assert small_straight([3,1,2,2,2]) == False
assert none([1,2,2,3,6]) == True
assert none([1,2,2,2,3]) == False

print('Great')

"""### Problem 2.3: Documenting your testing methodology.

Please clearly explain your testing methodology. In particular, make sure to include why you believe that your testing protocol is sufficient for establishing the correctness of your code

For each hand, I provided an assert that would check a set of dice that is not that hand, and that is that handed, to check if each function works in either case. They do, meaning the functions can check to see if a set of dice is that hand or is not.

## Problem 3: Yahtzee Simulation

Assuming five dice are rolled $n$ times, write a program that will determine the probability that each hand can be made with a single roll of the five dice. 

For example, if the dice were rolled four times, 3 of the rolls might be in the  and one of the rolls might be a Small straight. As such, your program would report that 3 (75%) of the dice rolls were Miscellaneous and 1 (25%) of the rolls were a Small straight.

### Examples 

**Note:** Since this is a simulation, your results may vary.

**Example #1**

The user is prompted for the number of times to roll five dice and the user enters 10 (line 1). Afterwards, the simulation results are printed.  For each Yahtzee combination, the shows the number of times the hand occurred and its percentage (lines 3 - 9).
```
Dice rolls: 10 

yahtzee: 0 (0.0 %)
four of a kind: 0 (0.0%) 
full house: 0 (0.0%)
three of a kind: 3 (30.0%)
large straight: 1 (10.0%) 
small straight: 1 (10.0%) 
none: 5 (50.0%)
```

**Example #2**

The user is prompted for the number of times to roll five dice and the user enters 2345 (line 1). Afterwards, the simulation results are printed.  For each Yahtzee combination, the shows the number of times the hand occurred and its percentage (lines 3 - 9).
```
Dice rolls: 2345

yahtzee: 2 (0.1 %)
four of a kind: 34 (1.4%) 
full house: 83 (3.5%)
three of a kind: 391 (16.7%)
large straight: 71 (3.0%) 
small straight: 206 (8.8%) 
none: 1558 (66.4%)
```

### Your simulation code.

Add your code inside of the main function. If necessary, feel free to use additional user-defined functions. 

**Note:** You are not required to write testing code for this problem.
"""

def main():
    """ Main driver of Yahtzee simulation."""
    # Add your code.

    number = int(input('Dice rolls: '))

    yatzhe = 0
    four = 0
    full = 0
    three = 0
    large = 0
    small = 0
    non = 0

    for i in range(number):
      if yahtzee(roll_dice()) == True:
        yatzhe += 1
      if four_of_a_kind(roll_dice()) == True:
        four += 1
      if full_house(roll_dice()) == True:
        full += 1
      if three_of_a_kind(roll_dice()) == True:
        three += 1
      if large_straight(roll_dice()) == True:
        large += 1
      if small_straight(roll_dice()) == True:
        small += 1
      if none(roll_dice()) == True:
        non += 1

    yatzheper = (yatzhe/number)*100
    fourz = (four/number)*100
    fullz = (full/number)*100
    threez = (three/number)*100
    largez = (large/number)*100
    smallz = (small/number)*100
    nonz = (non/number)*100

    print()
    print('yatzhee:', yatzhe, '('+ str(round(yatzheper, 1)) + '%)')
    print('four of a kind:', four, '(' + str(round(fourz, 1)) + '%)')
    print('full house:', full, '('+ str(round(fullz, 1)) + '%)')
    print('three of a kind:', three, '(' + str(round(threez, 1)) + '%)')
    print('large straight:', large, '(' + str(round(largez, 1)) + '%)')
    print('small straight:', small, '(' + str(round(smallz, 1)) + '%)')
    print('none:', non, '(' + str(round(nonz)) + '%)')


main()

"""## Problem 4: Plotting Yahtzee Simulation results

Write a program that plots the results of running a Yahtzee simulation. Your plot must consist of the following.

* You will have six curves representing the following Yahtzee hands: Yahtzee, four of a kind, three of a kind, Full house, Large straight, and small straight.

* The x axis will represent the number of dice rolls: 1, 10, 100, 1000, 10000, and 100000. The x axis should be log scaled.

* For a given number of dice rolls, the y axis will represent how often (as a percentage) that each hand appeared.

* Your y axis must start at 0.

* Your plot must have a title, a legend for the six curves, and the x- and y-axes must be labeled.

Feel free to color your plot however you like. Also, feel free to use any markers that you like to mark the various points on the plot. Please see the Colab notebook from October 27th for examples.
"""

# Add your plotting code.

import matplotlib.pyplot as plt

def plot(x, y):

    plt.plot(x, y, color='red', label = 'yatzhee', marker='o')
    plt.xscale('log')

    plt.title('Number for each hand')
    plt.xlabel('dice rolls')
    plt.ylabel('number in percentage')
    plt.grid()

    plt.ylim(0, max(y) + 5)

def plot2(x, y):

    plt.plot(x, y, color='blue', label = 'four of a kind', marker='o')
    plt.xscale('log')

    plt.title('Number for each hand')
    plt.xlabel('dice rolls')
    plt.ylabel('number in percentage')
    plt.grid()

    plt.ylim(0, max(y) + 5)

def plot3(x, y):

    plt.plot(x, y, color='orange', label = 'full house', marker='o')
    plt.xscale('log')

    plt.title('Number for each hand')
    plt.xlabel('dice rolls')
    plt.ylabel('number in percentage')
    plt.grid()

    plt.ylim(0, max(y) + 5)

def plot4(x, y):

    plt.plot(x, y, color='brown', label = 'three of a kind', marker='o')
    plt.xscale('log')

    plt.title('Number for each hand')
    plt.xlabel('dice rolls')
    plt.ylabel('number in percentage')
    plt.grid()

    plt.ylim(0, max(y) + 5)

def plot5(x, y):

    plt.plot(x, y, color='green', label = 'large straight', marker='o')
    plt.xscale('log')

    plt.title('Number for each hand')
    plt.xlabel('dice rolls')
    plt.ylabel('number in percentage')
    plt.grid()

    plt.ylim(0, max(y) + 5)

def plot6(x, y):

    plt.plot(x, y, color='black', label = 'small straight', marker='o')
    plt.xscale('log')

    plt.title('Number for each hand')
    plt.xlabel('dice rolls')
    plt.ylabel('number in percentage')
    plt.grid()

    plt.ylim(0, max(y) + 5)

def main(number):
    """ Main driver of Yahtzee simulation."""
    # Add your code.


    yatzhe = 0
    four = 0
    full = 0
    three = 0
    large = 0
    small = 0
    non = 0

    for i in range(number):
      if yahtzee(roll_dice()) == True:
        yatzhe += 1

    yatzheper = (yatzhe/number)*100

    return yatzheper

def main(number):
    """ Main driver of Yahtzee simulation."""
    # Add your code.


    yatzhe = 0
    four = 0
    full = 0
    three = 0
    large = 0
    small = 0
    non = 0

    for i in range(number):
      if yahtzee(roll_dice()) == True:
        yatzhe += 1

    yatzheper = (yatzhe/number)*100

    return yatzheper

def main2(number):
    """ Main driver of Yahtzee simulation."""
    # Add your code.


    yatzhe = 0
    four = 0
    full = 0
    three = 0
    large = 0
    small = 0
    non = 0

    for i in range(number):
      if four_of_a_kind(roll_dice()) == True:
        four += 1

    fourz = (four/number)*100

    return fourz

def main3(number):
    """ Main driver of Yahtzee simulation."""
    # Add your code.


    yatzhe = 0
    four = 0
    full = 0
    three = 0
    large = 0
    small = 0
    non = 0

    for i in range(number):
      if full_house(roll_dice()) == True:
        full += 1

    fullz = (full/number)*100

    return fullz

def main4(number):
    """ Main driver of Yahtzee simulation."""
    # Add your code.


    yatzhe = 0
    four = 0
    full = 0
    three = 0
    large = 0
    small = 0
    non = 0

    for i in range(number):
      if three_of_a_kind(roll_dice()) == True:
        three += 1

    threez = (three/number)*100

    return threez

def main5(number):
    """ Main driver of Yahtzee simulation."""
    # Add your code.


    yatzhe = 0
    four = 0
    full = 0
    three = 0
    large = 0
    small = 0
    non = 0

    for i in range(number):
      if large_straight(roll_dice()) == True:
        large += 1

    largez = (large/number)*100

    return largez


def main6(number):
    """ Main driver of Yahtzee simulation."""
    # Add your code.


    yatzhe = 0
    four = 0
    full = 0
    three = 0
    large = 0
    small = 0
    non = 0

    for i in range(number):
      if small_straight(roll_dice()) == True:
        small += 1

    smallz = (small/number)*100

    return smallz





def plot_function():

  xlist = [1, 10, 100, 1000, 10000, 100000]
  ylist = []
  ylist2 = []
  ylist3 = []
  ylist4 = []
  ylist5 = []
  ylist6 = []
  for i in xlist:
    ylist += [main(i)]
  for i in xlist:
    ylist2 += [main2(i)]
  for i in xlist:
    ylist3 += [main3(i)]
  for i in xlist:
    ylist4 += [main4(i)]
  for i in xlist:
    ylist5 += [main5(i)]
  for i in xlist:
    ylist6 += [main6(i)]

  plot(xlist, ylist)
  plot2(xlist, ylist2)
  plot3(xlist, ylist3)
  plot4(xlist, ylist4)
  plot5(xlist, ylist5)
  plot6(xlist, ylist6)
  plt.legend()


plot_function()



