# -*- coding: utf-8 -*-
"""Copy of Copy of Assignment7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1psZyOxnW42Bw_RanjRjmgzCZccDHehnB

# Assignment #7

Due: Wed., Oct. 21st by 11:59pm

# **Problem 1**: Luhn's Algorithm

Luhn's algorithm, also known as the modulus 10 or mod 10 algorithm, is a checksum formula used to validate a variety of identification numbers, such as credit card numbes. Write a program that asks for an account number and determines whether or not the number is valid using Luhn's algorithm. The steps of the algorithm are given below.

1. Double every second digit from right to left.

2. Sum of the doubled digt from step (a). If doubling a digit results in a two-digit number (e.g., 8 x 2 = 16), add the two digits to get a single-digit number (e.g., 16: 1 + 6 = 7).

3. Add all digits in the odd places from right to left to the sum in step 2.

4. If the sum from step 3 is a multiple of 10, the number is valid. Otherwise, the number is not valid.


Consider the following examples of performing Luhn's algorithm.

**Example 1.** 
Account number: 79927398713

\begin{array}{|l|l|l|l|l|l|l|l|l|l|l|l|}
\hline
\text{Account number} & 7 & 9 & 9 & 2 & 7 & 3 & 9 & 8 & 7 & 1 & 3 \\ \hline
\text{Double every digit from right to left} & & 18 & & 4 & & 6 & & 16 & & 2 &   \\ \hline
\text{Sum digits} & 7 & 9~(1 + 8) & 9 & 4 & 7 & 6 & 9 & 7~(1+6) & 7 & 2 & 3 \\ \hline
\end{array}

The sum 7 + 9 + 9 + 4 + 7 + 6 + 9 + 7 + 7 + 2 + 3 = 70, which is a multiple of 10. Thus, the account number is valid.

**Example 2.**
Account number: 12345675

\begin{array}{|l|l|l|l|l|l|l|l|l|}
\hline
\text{Account number} & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 5 \\ \hline
\text{Double every digit from right to left} & 2 &  & 6 &  & 10 &  & 14 &    \\ \hline
\text{Sum digits} & 2 & 2 & 6 & 4 & 1~(1+0) & 6 & 5~(1+4) & 5   \\ \hline
\end{array}

The sum 2 + 2 + 6 + 4 + 1 + 6 + 5 + 5 = 31, which is not a multiple of 10. Thus, the account number is not valid.

## Problem 1.1: Defining user-defined functions.

You will write two user-defined functions: `sum_digits()` and `is_valid_luhn_checksum()`.

* `sum_digits()` has one parameter `int_num` and returns the sum of its digits.
*  `is_valid_luhn_checksum()` checks the validity of a credit card number using Luhn's algorithm. The function has one parameter `credit_card_num` and returns True if `credit_card_num` is valid under Luhn's algorithm. Otherwise, the  function returns False.

* It is expected that you will make use of (or call) the `sum_digits()` function in the `is_valid_luhn_checksum()` function.
"""

def sum_digits(int_num):
    """
    Returns the sum of the digits of a positive integer.

    Paramters:
        int_num (int): a positive integer

    Returns:
        int: the sum of the digits of int_num
       
    Examples:
        sum_digits(1234) returns 10
        sum_digits(9850) returns 22
    """ 
    strint = str(int_num)
    sum = 0
    for digit in strint:
      sum += int(digit)

    return sum

    

def is_valid_luhn_checksum(credit_card_num):
    """
    Returns whether the string credit_card_num is a valid under Luhn's algorithm. 

    Paramters:
        credit_card_num (str): a string representing a credit card number. 

    Returns:
        bool: returns True if credit_card_num is valid; returns False otherwise. 
    
    Examples:
        is_valid_luhn_checksum('79927398713') returns True
        is_valid_luhn_checksum('12345675') returns False
    """

    ccstr = str(credit_card_num)
    numberslist = ''

    for digit in ccstr[1::2]:
      number = int(digit)
      numbers = number * 2
      if numbers > 9:
        numbers = sum_digits(numbers)
      numberslist += str(numbers)

    other_sum = 0

    for digit in ccstr[::2]:
      number = int(digit)
      other_sum += number 
    

    sumoflist = sum_digits(numberslist)


    last_number = sumoflist + other_sum


    if last_number % 10 == 0:
      return True
    else:
      return False

"""## Problem 1.2: Testing your code.

You must add assert statements to test your `sum_digits()` and `is_valid_luhn_checksum()` function.  Your testing must go beyond the examples provided in the docstrings of these functions.
"""

# TESTING YOUR CODE -- sum_digits() function

assert sum_digits(9999) == 36
assert sum_digits(00) == 0
assert sum_digits(10000) == 1

print('nice!')

# TESTING YOUR CODE -- is_valid_luhn_checksum() function


assert is_valid_luhn_checksum('7870000') == False
assert is_valid_luhn_checksum('9999999') == False
assert is_valid_luhn_checksum('00111100') == False
assert is_valid_luhn_checksum('00000000000') == True

print('coool')

"""## Problem 1.3: Documenting your testing methodology.


Please clearly explain your testing methodology. In particular, make sure to include why you believe that your testing protocol is sufficient for establishing the correctness of your code.

I believe the testing is enough to establish that the code is correct as for the sum function, we make sure that if all digits are integers, it will work correctly, as well as checking if zeros will sum to zero. If there is a combination of integers and zeros, it also works.

For the validation function, we test different types of credit cards numbers, including some that have a combination of integers and zeros, one that would include doubling to double digit numbers, and a number that is all zeros.

## You are done with Problem 1.

For completeness, a user-defined `main()` function that gets a credit card number from the user. The function `main` then sends this input to the `is_valid_luhn_checksum()` function. The program outputs `valid` if the credit card number is valid. Otherwise, the program outputs `not valid`.

Feel free to run and experiment with the code
"""

def main():
    credit_card_num = input("Credit card number: ")

    if is_valid_luhn_checksum(credit_card_num): 
        print('valid')
    else:
        print('not valid')

main()

"""# **Problem 2:** Drawing a Rocket.

Write a program to draw a rocket. The size of the rocket is an integer. Your program must work for a size of 3 or greater.

## Examples.

### Example #1: 
The user is prompted for the size of the rocket ship, and the user enters 3 (line 1). Afterwards, the rocket ship is printed (lines 3 - 27)

```
Size: 3

     /**\
    //**\\
   ///**\\\
  ////**\\\\
 /////**\\\\\
+=*=*=*=*=*=*+
|../\..../\..|
|./\/\../\/\.|
|/\/\/\/\/\/\|
|\/\/\/\/\/\/|
|.\/\/..\/\/.|
|..\/....\/..|
+=*=*=*=*=*=*+
|\/\/\/\/\/\/|
|.\/\/..\/\/.|
|..\/....\/..|
|../\..../\..|
|./\/\../\/\.|
|/\/\/\/\/\/\|
+=*=*=*=*=*=*+
     /**\
    //**\\
   ///**\\\
  ////**\\\\
 /////**\\\\\
 ```

The size of the rocket ship refers to the subfigures in the middle of the output that have a height of 3. For example, lines 9-11 show a subfigure with a height of 3.

```
|../\..../\..|
|./\/\../\/\.|
|/\/\/\/\/\/\|
```

Lines 12-14, 16-18, and 19-21 are also subfigures of height 3. To draw the remaining parts of the rocket, the rest of the figure is scaled based on a size (height) of 3.

### Example #2.

The user enters 5 at the prompt (line 1) to output the rocket (lines 3-43).

```
Size: 5

         /**\
        //**\\
       ///**\\\
      ////**\\\\
     /////**\\\\\
    //////**\\\\\\
   ///////**\\\\\\\
  ////////**\\\\\\\\
 /////////**\\\\\\\\\
+=*=*=*=*=*=*=*=*=*=*+
|..../\......../\....|
|.../\/\....../\/\...|
|../\/\/\..../\/\/\..|
|./\/\/\/\../\/\/\/\.|
|/\/\/\/\/\/\/\/\/\/\|
|\/\/\/\/\/\/\/\/\/\/|
|.\/\/\/\/..\/\/\/\/.|
|..\/\/\/....\/\/\/..|
|...\/\/......\/\/...|
|....\/........\/....|
+=*=*=*=*=*=*=*=*=*=*+
|\/\/\/\/\/\/\/\/\/\/|
|.\/\/\/\/..\/\/\/\/.|
|..\/\/\/....\/\/\/..|
|...\/\/......\/\/...|
|....\/........\/....|
|..../\......../\....|
|.../\/\....../\/\...|
|../\/\/\..../\/\/\..|
|./\/\/\/\../\/\/\/\.|
|/\/\/\/\/\/\/\/\/\/\|
+=*=*=*=*=*=*=*=*=*=*+
         /**\
        //**\\
       ///**\\\
      ////**\\\\
     /////**\\\\\
    //////**\\\\\\
   ///////**\\\\\\\
  ////////**\\\\\\\\
 /////////**\\\\\\\\\
```
Lines 13-17 show a subfigure with a size (or height) of 5.

```
|..../\......../\....|
|.../\/\....../\/\...|
|../\/\/\..../\/\/\..|
|./\/\/\/\../\/\/\/\.|
|/\/\/\/\/\/\/\/\/\/\|
```
Lines 18-22, 24-28, and 29-33 are also subfigures of size 5. Again, the rest of the figure is scaled based on a size of 5.

### Example #3.

Just in case you need a larger example. Here is a size 14 rocket!

```
Size: 14

                           /**\
                          //**\\
                         ///**\\\
                        ////**\\\\
                       /////**\\\\\
                      //////**\\\\\\
                     ///////**\\\\\\\
                    ////////**\\\\\\\\
                   /////////**\\\\\\\\\
                  //////////**\\\\\\\\\\
                 ///////////**\\\\\\\\\\\
                ////////////**\\\\\\\\\\\\
               /////////////**\\\\\\\\\\\\\
              //////////////**\\\\\\\\\\\\\\
             ///////////////**\\\\\\\\\\\\\\\
            ////////////////**\\\\\\\\\\\\\\\\
           /////////////////**\\\\\\\\\\\\\\\\\
          //////////////////**\\\\\\\\\\\\\\\\\\
         ///////////////////**\\\\\\\\\\\\\\\\\\\
        ////////////////////**\\\\\\\\\\\\\\\\\\\\
       /////////////////////**\\\\\\\\\\\\\\\\\\\\\
      //////////////////////**\\\\\\\\\\\\\\\\\\\\\\
     ///////////////////////**\\\\\\\\\\\\\\\\\\\\\\\
    ////////////////////////**\\\\\\\\\\\\\\\\\\\\\\\\
   /////////////////////////**\\\\\\\\\\\\\\\\\\\\\\\\\
  //////////////////////////**\\\\\\\\\\\\\\\\\\\\\\\\\\
 ///////////////////////////**\\\\\\\\\\\\\\\\\\\\\\\\\\\
+=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*+
|............./\........................../\.............|
|............/\/\......................../\/\............|
|.........../\/\/\....................../\/\/\...........|
|........../\/\/\/\..................../\/\/\/\..........|
|........./\/\/\/\/\................../\/\/\/\/\.........|
|......../\/\/\/\/\/\................/\/\/\/\/\/\........|
|......./\/\/\/\/\/\/\............../\/\/\/\/\/\/\.......|
|....../\/\/\/\/\/\/\/\............/\/\/\/\/\/\/\/\......|
|...../\/\/\/\/\/\/\/\/\........../\/\/\/\/\/\/\/\/\.....|
|..../\/\/\/\/\/\/\/\/\/\......../\/\/\/\/\/\/\/\/\/\....|
|.../\/\/\/\/\/\/\/\/\/\/\....../\/\/\/\/\/\/\/\/\/\/\...|
|../\/\/\/\/\/\/\/\/\/\/\/\..../\/\/\/\/\/\/\/\/\/\/\/\..|
|./\/\/\/\/\/\/\/\/\/\/\/\/\../\/\/\/\/\/\/\/\/\/\/\/\/\.|
|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\|
|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|
|.\/\/\/\/\/\/\/\/\/\/\/\/\/..\/\/\/\/\/\/\/\/\/\/\/\/\/.|
|..\/\/\/\/\/\/\/\/\/\/\/\/....\/\/\/\/\/\/\/\/\/\/\/\/..|
|...\/\/\/\/\/\/\/\/\/\/\/......\/\/\/\/\/\/\/\/\/\/\/...|
|....\/\/\/\/\/\/\/\/\/\/........\/\/\/\/\/\/\/\/\/\/....|
|.....\/\/\/\/\/\/\/\/\/..........\/\/\/\/\/\/\/\/\/.....|
|......\/\/\/\/\/\/\/\/............\/\/\/\/\/\/\/\/......|
|.......\/\/\/\/\/\/\/..............\/\/\/\/\/\/\/.......|
|........\/\/\/\/\/\/................\/\/\/\/\/\/........|
|.........\/\/\/\/\/..................\/\/\/\/\/.........|
|..........\/\/\/\/....................\/\/\/\/..........|
|...........\/\/\/......................\/\/\/...........|
|............\/\/........................\/\/............|
|.............\/..........................\/.............|
+=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*+
|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|
|.\/\/\/\/\/\/\/\/\/\/\/\/\/..\/\/\/\/\/\/\/\/\/\/\/\/\/.|
|..\/\/\/\/\/\/\/\/\/\/\/\/....\/\/\/\/\/\/\/\/\/\/\/\/..|
|...\/\/\/\/\/\/\/\/\/\/\/......\/\/\/\/\/\/\/\/\/\/\/...|
|....\/\/\/\/\/\/\/\/\/\/........\/\/\/\/\/\/\/\/\/\/....|
|.....\/\/\/\/\/\/\/\/\/..........\/\/\/\/\/\/\/\/\/.....|
|......\/\/\/\/\/\/\/\/............\/\/\/\/\/\/\/\/......|
|.......\/\/\/\/\/\/\/..............\/\/\/\/\/\/\/.......|
|........\/\/\/\/\/\/................\/\/\/\/\/\/........|
|.........\/\/\/\/\/..................\/\/\/\/\/.........|
|..........\/\/\/\/....................\/\/\/\/..........|
|...........\/\/\/......................\/\/\/...........|
|............\/\/........................\/\/............|
|.............\/..........................\/.............|
|............./\........................../\.............|
|............/\/\......................../\/\............|
|.........../\/\/\....................../\/\/\...........|
|........../\/\/\/\..................../\/\/\/\..........|
|........./\/\/\/\/\................../\/\/\/\/\.........|
|......../\/\/\/\/\/\................/\/\/\/\/\/\........|
|......./\/\/\/\/\/\/\............../\/\/\/\/\/\/\.......|
|....../\/\/\/\/\/\/\/\............/\/\/\/\/\/\/\/\......|
|...../\/\/\/\/\/\/\/\/\........../\/\/\/\/\/\/\/\/\.....|
|..../\/\/\/\/\/\/\/\/\/\......../\/\/\/\/\/\/\/\/\/\....|
|.../\/\/\/\/\/\/\/\/\/\/\....../\/\/\/\/\/\/\/\/\/\/\...|
|../\/\/\/\/\/\/\/\/\/\/\/\..../\/\/\/\/\/\/\/\/\/\/\/\..|
|./\/\/\/\/\/\/\/\/\/\/\/\/\../\/\/\/\/\/\/\/\/\/\/\/\/\.|
|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\|
+=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*+
                           /**\
                          //**\\
                         ///**\\\
                        ////**\\\\
                       /////**\\\\\
                      //////**\\\\\\
                     ///////**\\\\\\\
                    ////////**\\\\\\\\
                   /////////**\\\\\\\\\
                  //////////**\\\\\\\\\\
                 ///////////**\\\\\\\\\\\
                ////////////**\\\\\\\\\\\\
               /////////////**\\\\\\\\\\\\\
              //////////////**\\\\\\\\\\\\\\
             ///////////////**\\\\\\\\\\\\\\\
            ////////////////**\\\\\\\\\\\\\\\\
           /////////////////**\\\\\\\\\\\\\\\\\
          //////////////////**\\\\\\\\\\\\\\\\\\
         ///////////////////**\\\\\\\\\\\\\\\\\\\
        ////////////////////**\\\\\\\\\\\\\\\\\\\\
       /////////////////////**\\\\\\\\\\\\\\\\\\\\\
      //////////////////////**\\\\\\\\\\\\\\\\\\\\\\
     ///////////////////////**\\\\\\\\\\\\\\\\\\\\\\\
    ////////////////////////**\\\\\\\\\\\\\\\\\\\\\\\\
   /////////////////////////**\\\\\\\\\\\\\\\\\\\\\\\\\
  //////////////////////////**\\\\\\\\\\\\\\\\\\\\\\\\\\
 ///////////////////////////**\\\\\\\\\\\\\\\\\\\\\\\\\\\
```

## Your objective.

You must write the code for drawing a rocket from scratch. No scaffolding is provided for you. So, you are free to design your code in whatever way that suits you. Please make sure you adhere to the coding tips and requirements section below.

### Coding tips and requirements.

1. Before writing any code, make sure you understand the problem! Prepare a few examples by hand to make sure you clearly understand the problem.

2. Please use a divide-and-conqure approach when writing your program. In addition, sketch out your approach on paper, a whiteboard, etc. before putting your fingers on the keyboard. The more time you spend planning means less time in the debugging phase.

2. Your code must be composed of several user-defined functions. Code that is not composed of user-defined functions will receive a zero for this problem. Functions are your friend so please leverage them in your code.

4. Your code must be well-documented. For functions, make sure you follow the document template provided by the user-defined functions `sum_digits` and `is_valid_luhn_checksum()` in Problem 1.1 of this assignment.

5. You must use good variable names. The variable name must describe the information represented by the variable. A variable name should tell you specifically in words what the variable stands for. 
Your code will be read more times than it is written. You can also use comments as appropriate to describe your variables.

6. Prioritize how easy your code is to understand rather than how quickly it is written. Please use descriptive comments appropriately.

7. You must discuss your testing methodology and where appropriate use assert statements that test your user-defined functions.

8. We have covered the releveant elements of the Python programming language that are necessary to draw a rocket. You are more than prepared to successfully solve this problem.

## Problem 2.1: Your code to draw a rocket ship.
"""

down_string = '\\/'

surface = '|'

dot = '.'

string = '/\\'

just_one_string = '/'

just_one_string_backwards = '\\'



def tip(size):
  '''
  Returns the top part of the rocket, as well as the very bottom part

  Paramaters:
    size (int): a positive integer

  Returns:
    lines of strings drawing out the tip of the rocket

  Example: 
    tip(2) returns 
         /**\
        //**\\
  '''

  star = '*'
  x = 1
  y = size * 2 - 1
  space = ' '

  while x < size * 2 :
    print(space * y + (just_one_string * (x) + star * 2 + just_one_string_backwards * (x)))
    x += 1
    y -= 1


def main_1(size):
    '''
    Returns the top part of the main base of the rocket
    
    Parameters: 
      size (int): a positive integer
    
    Returns: 
      lines of string drawing this part of the rocket

    Example: 
      2 returns 
      |./\../\.|
      |/\/\/\/\|
    '''

    real_string = string * size * 2

    base = surface + real_string + surface

    y = 1
    x = size - 1
    while x > 0:
      dots = dot * x
      strings = string * y
      print(surface + ((dots + strings + dots) * 2) + surface)
      x -= 1
      y += 1

    print(base)

def main_2(size):
    '''
    Returns the bottom part of the base of the rocket

    Parameters:
      size(int): a positive integer

    Returns:
      lines of string drawing this part of the rocket
    
    Example:
      2 returns 
      |\/\/\/\/|
      |.\/..\/.|

    '''

    real_string = down_string * size * 2

    base = surface + real_string + surface

    print(base)

    y = 1
    x = size - 1
    while x > 0:
      down_strings = down_string * x
      dots = dot * y
      print(surface + ((dots + down_strings + dots) * 2) + surface)
      x -= 1
      y += 1



def in_between_line(size):
    '''
    Returns the line that goes between different parts of rocket

    Parameters:
      size (int): a positive integer

    Returns:
      a line of string
    
    Example:
      4 returns
      +=*=*=*=*=*=*=*=*+
    
    '''

    weird_string = '=*'

    end = '+'

    print(end + (weird_string * size * 2) + end)




def mainfr():

  '''
  Draws the rocket

  Returns:
    user input line asking for size of rocket
    lines of strings drawing rockets

  Example:
    Size: 3
     /**\
    //**\\
   ///**\\\
  ////**\\\\
 /////**\\\\\
+=*=*=*=*=*=*+
|../\..../\..|
|./\/\../\/\.|
|/\/\/\/\/\/\|
|\/\/\/\/\/\/|
|.\/\/..\/\/.|
|..\/....\/..|
+=*=*=*=*=*=*+
|\/\/\/\/\/\/|
|.\/\/..\/\/.|
|..\/....\/..|
|../\..../\..|
|./\/\../\/\.|
|/\/\/\/\/\/\|
+=*=*=*=*=*=*+
     /**\
    //**\\
   ///**\\\
  ////**\\\\
 /////**\\\\\

  '''

  size = int(input('Size: '))

  tip(size)

  in_between_line(size)

  main_1(size)

  main_2(size)

  in_between_line(size)

  main_2(size)

  main_1(size)

  in_between_line(size)

  tip(size)

"""## Problem 2.2: Testing your code.

Please clearly explain your testing methodology.

To test my code, I simply called each function as I was writing them using various examples and looked to see if the result was the drawings that I expected. I also called the main fucnctoin and saw that it put together all the different parts with the right size and in the right indentation. 
"""

# Add assert statements to test your 
# user-defined functions as appropriate. You are
# free to use as many code cells that
# you need.