# -*- coding: utf-8 -*-
"""Copy of Assignment8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yYaoyrI9q84cZNkzcDwPVkNMkgKKYRv4

# CS 498: Fundamentals of Computer Science I
## Assignment #8

**Due:** Wed., Oct. 28th by 11:59pm

**Directions:** Please upload your completed Colab notebook to Compass by the deadline.

## **Problem 1**: Integer to English

Define a function `int_to_english()` with one parameter `int_num` that, given an integer, returns a string with the equivalent English text of each digit. Consider the following examples.

* `int_to_english(4) returns the string "four"
* `int_to_english(12) returns the string "one two" 
* `int_to_english(8382) returns the string "eight three eight two"
"""

def int_to_english(int_num):
    """
    Returns a string with the equivalent English text of each digit.

    Parameters:
        int_num (int): an integer greate than 0

    Returns:
        str: a string representing an integer

    Examples:
        int_to_english(4) returns the string "four"
        `int_to_english(8382) returns the string "eight three eight two"
    """

    string = str(int_num)
    mylist = ''

    one_digit_english_list = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']


    if len(string) > 1:
      for digit in string[:-1]:
        mylist += one_digit_english_list[int(digit)]
        mylist += ' '


    mylist += one_digit_english_list[int(string[-1])]

    return mylist

# TEST YOUR CODE 

assert int_to_english(22) == 'two two'
assert int_to_english(345) == 'three four five'
assert int_to_english(1111) == 'one one one one'

print('nice')

"""*Programming tip.* If you used if-elif-else statements in your `int_to_english()` function, try making your solution shorter and possibly even more clear by incorporating the following list.

```
one_digit_english_list = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
```

Here, `one_digit_english_list` is a list containing 10 strings, which represents the English words `'one'`, `'two'`, `'three'`, etc.

## Problem 2: Integer to English (Part 2)

Write a program to convert an integer from 0 to 1,000,000 into its English word equivalent. For example,
* 4 is four,
* 181 is one hundred eighty one, and
* 503,038 is five hundred three thousand and thirty eight.

### Examples

Example #1
```
Number: 4

four
```

Example #2
```
Number: 181
 
one hundred eighty one
```

Example #3

```
Number: 503038
 
five hundred three thousand and thirty eight
```

### Your Objective

You must write the code for converting integers to English from scratch. No scaffolding is provided for you. So, you are free to design your code in whatever way that suits you. Please make sure you adhere to the coding tips and requirements section below.

#### Coding tips and requirements.

1. Before writing any code, make sure you understand the problem! Prepare a few examples by hand to make sure you clearly understand the problem.

2. Build up your code slowly to handle numbers from zero to one million. A possible strategy is to get your program to work for numbers 0 to 9, then 10 to 19, then 20 to 100, 101 to 1000, etc. That is, use a divide and conquer approach and solve the easy piecies of the problem first.

3. Please use a divide-and-conqure approach when writing your program. In addition, sketch out your approach on paper, a whiteboard, etc. before putting your fingers on the keyboard. The more time you spend planning means less time in the debugging phase.

4. Your code must be composed of several user-defined functions. Code that is not composed of user-defined functions will receive a zero for this problem. Functions are your friend so please leverage them in your code.

5. Your code must be well-documented. For functions, make sure you follow the document template provided by the user-defined functions `int_to_english` in Problem 1 of this assignment.

6. You must use good variable names. The variable name must describe the information represented by the variable. A variable name should tell you specifically in words what the variable stands for. 
Your code will be read more times than it is written. You can also use comments as appropriate to describe your variables.

7. Prioritize how easy your code is to understand rather than how quickly it is written. Please use descriptive comments appropriately.

8. You must discuss your testing methodology and where appropriate use assert statements that test your user-defined functions.

9. We have covered the relevant elements of the Python programming language that are necessary to convert integers to English words. You are more than prepared to successfully solve this problem.

### Problem 2.1: Code to convert an integer to an English word.
"""

def main(num):
  """
    Returns a string with the equivalent English text of a number between 0 and 1,000,0000.

    Parameters:
        int_num (int): an integer between 0 and 1,000,000

    Returns:
        str: a string that is the english words for a number.

    Examples:
        main(50) returns the string "fifty"
        main(833) returns the string "eight hundred thirty three"
  """

  

  one_digit_english_list = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
  anotherlist = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy',	'eighty', 'ninety']

  def ones_into_english():
      """
      Returns a string with the equivalent English word of the ones place.

      Returns:
          str: a string representing a digit

      Examples:
          0000004 returns the string "four"

      """

      
      one_digit_english_list = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']


      if string == '0000000':
        return 'zero'  
      if string[-2] == '1':
        return one_digit_english_list[0]
      else:
        for digit in string[-1]:
          return one_digit_english_list[int(digit)]



  def tens_into_english():
      """
      Returns a string with the equivalent English words of the number in the tens place.

      Returns:
          str: a string representing a tens place integer

      Examples:
          0000040 returns string 'forty'
      """
  

      listofnumbersinteens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']
      anotherlist = ['twenty ', 'thirty ', 'forty ', 'fifty ', 'sixty ', 'seventy ',	'eighty ', 'ninety ']

      if string[-2] == '0':
        return ''
      if string[-2] == '1':
        for digit in string[-1]:
          return listofnumbersinteens[int(digit)]
      else:
        for digit in string[-2]:
          return anotherlist[int(digit) - 2]

  def hundreds_into_english():
      """
      Returns a string with the equivalent English words of the number in the hundreds place.

      Returns:
          str: a string representing a hundreds place integer

      Examples:
          0000400 returns string 'four hundred'
      """
    

      listofnumbershundreds = ['one hundred ', 'two hundred ', 'three hundred ', 'four hundred ', 'five hundred ', 'six hundred ', 'seven hundred ', 'eight hundred ', 'nine hundred ']
      anotherlist = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy',	'eighty', 'ninety']

      
      if string[-3] == '0':
        return ''
      for digit in string[-3]:
        return listofnumbershundreds[int(digit)- 1]

  def thousands_into_english():
      """
      Returns a string with the equivalent English words of the number in the thousands place.

      Returns:
          str: a string representing a thousands place integer

      Examples:
          0004000 returns string 'four thousand'
      """

      
      thousand = ' thousand '

      if string[-4] == '0':
        return ''
      elif string[4:] != '000':
        for digit in string[-4]:
          return one_digit_english_list[int(digit)] + ' thousand and '
      else:
        for digit in string[-4]:
          return one_digit_english_list[int(digit)] + thousand
      

  def tens_of_thousands_into_english():
      """
      Returns a string with the equivalent English words of the number in the tens of thousands place.

      Returns:
          str: a string representing a tens of thousands place integer

      Examples:
          0040000 returns string 'forty thousand'
      """



      tenthousand = ' thousand '

      if string[-5] == '0':
        return ''
      elif string[-4] == '0':
        for digit in string[-5]:
          return anotherlist[int(digit) - 2] + tenthousand
      else:
        for digit in string[-5]:
          return anotherlist[int(digit) - 2] + ' '
      

  def hundreds_of_thousands_into_english():
      """
      Returns a string with the equivalent English words of the number in the hundreds of thousand place.

      Returns:
          str: a string representing a tens place integer

      Examples:
          0400000 returns string 'four hundred thousand'
      """

      hundredthousand = ' hundred thousand '

      if string[-6] == '0':
        return ''
      elif string[-5] == '0':
        for digit in string[-6]:
          return one_digit_english_list[int(digit)] + hundredthousand
      else:
        for digit in string[-6]:
          return one_digit_english_list[int(digit)] + ' hundred '


  def millions_into_english():
      """
      Returns a string with the equivalent English words of the number in the millions place.

      Returns:
          str: a string representing a millions place integer

      Examples:
          4000000 returns string 'four million'
      """

      if string[-7] == '0':
        return ''
      for digit in string[-7]:
        return one_digit_english_list[int(digit)] + ' million '


  strin = str(num)
  amount = 0
  add = ''
  amount = 7 - len(strin)
  add += '0'*amount
  string = add + strin

  mylist = ''

  mylist += millions_into_english()
  mylist += hundreds_of_thousands_into_english()
  mylist += tens_of_thousands_into_english()
  mylist += thousands_into_english()
  mylist += hundreds_into_english()
  mylist += tens_into_english()
  mylist += ones_into_english()

  return mylist



"""### Problem 2.2: Testing your code."""

# Add assert statements to test your 
# user-defined functions as appropriate. You are
# free to use as many code cells that
# you need

assert main(1) == 'one'
assert main(154) == 'one hundred fifty four'
assert main(77777) == 'seventy seven thousand and seven hundred seventy seven'

print('Finally this assert works!')

"""## (Extra Credit) Problem #3

In the Excursions in Computing course, we explored how to visualize Covid-19 data. For this extra credit problem, you will use data from the Covid Tracking Project to explore how Covid-19 is impacting the U.S. 

Here are relevant URLs.
*  Main page: https://covidtracking.com/ 
* Data API: https://covidtracking.com/data/api
*  Data definitions: https://covidtracking.com/about-data/data-definitions

## Problem 3.1: Your Objective

Your goal is to define a function `plot_covid()` that plots a single column (or field) of interest for a particular state. You can find out information about the different fields below.

https://covidtracking.com/about-data/data-definitions

The `plot_covid()` function takes seven parameters: `df`, `field`, `state`, `title`, `xlabel`, `ylabel`, `colr`. Detail of the function including the seven parameters are described inside the function definition in the code cell below. 

Code has provided to do the following.
* Importing the required libraries.
* Getting Covid-19 data and reading it into a pandas dataframe, which is provided in the `get_covid_data()` function.

**Testing your function.** There is not a way to test your `plot_covid()` function using `assert` statements. So, you will not need to write any formal tests.
"""

# Import libraries

import matplotlib.pyplot as plt
import pandas as pd

def get_covid_data():
    """
    Gets Covid-19 data from The COVID Tracking Project and converts
    relevant fields to the proper datatype.

    Parameters:
        None

    Returns:
        dataframe: pandas dataframe that contains Covid-19 data

    """

    #Define the URL and store content into a pandas dataframe.
    url = 'https://api.covidtracking.com/v1/states/daily.csv'
    covid_df = pd.read_csv(url)

    # Convert the date column (or field) to the dat-time format. 
    covid_df['date'] = pd.to_datetime(covid_df['date'], format='%Y%m%d')

    # Convert the data in the state column to the string type.
    covid_df['state'] = covid_df['state'].apply(str)

    return covid_df

def plot_covid(df, field, state, title, xlabel, ylabel, colr):
    """
    Plot a single Covid-19 variable for a US state.

    Parameters:
        df (data frame): Pandas data frame
        field (str): the field (or column) of interest to plot
                    from the data frame (df).
        state (str): state of interest; represented as an abbreviation
        title (str): title for the plot
        xlabel (str): label for the x-axis
        ylabel (str): label for the y-axis
        colr (str): bar plot color

    Returns:
        None

    Example:
        Note: The following function call is a long line.
              In Python, you cannot split a statement into
              multiple lines by pressing Enter. Instead, you
              must use a backslash(\) to indicate that the
              statment is continued on the next line.
        
        plot_covid(<dataframe containing Covid-19 data>,\
                   'positiveIncrease',\
                   'IL',\ 
                   'New positive Covid-19 cases in IL',\ 
                   'date',\
                   'new cases',\
                   'blue')

        plot_covid(<dataframe containing Covid-19 data>,\
                   'hospitalizedCurrently',\
                   'TX',\ 
                   'Hospitalized Covid-19 cases in TX',\ 
                   'date',\
                   'cases',\
                   'green')

    """

    # add code here

"""Below are a few code cells to show you how to call your function and create some interesting plots. You are free to create additional code cells to explore and visualize the data."""

# Get covid_data.
# We only need to do this once, which is why this line
# is in its own cell.
df = get_covid_data()

# We use backlash(\) to separate long lines.
plot_covid(df,\
           'positiveIncrease',\
           'IL',\
           'New positive Covid-19 cases in IL',\
           'date',\
           'new cases',\
           'blue')

plot_covid(df,\
           'deathIncrease',\
           'TX',\
           'New Covid-19 deaths in Texas',\
           'date',\
           'cases',\
           'green')

# Feel free to add your own function calls for the
# plot_covid() function.

"""## Problem 3.2: Reflection

Please reflect on the Covid-19 visualizations you created. You are also free to use this space to provide any additional insights related to this problem. 
"""