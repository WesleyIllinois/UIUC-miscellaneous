# -*- coding: utf-8 -*-
"""Copy of Assignment10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lAqRaIpxTG3lHP3yo9YMJa-PQsPbIxeP

# CS 498: Fundamentals of Computer Science I
## Assignment #10

**Due:** Friday, Dec. 4th by 11:59pm Central Time

**Total points:** 150 points of fun. :-)

# Directions

* **Start early!** By starting early, you allow yourself plenty of time and opportunity to seek clarification and help. Donâ€™t make the common mistake of underestimating the complexity and time required to solve a programming problem. 

* **Have fun!** You've learned a lot and this assignment is a reflection of the knowledge you have gained throughout the semester.

* Please upload your completed Colab notebook to Compass by the deadline.

# 1 Run-length encoding

In your Excursions class, you recently read a paper on algorithms for compressing data.  One of the algorithms discussed was run-length encoding (RLE).

Applying RLE to a string involves finding sequences in the string where the same character repeats. RLE replaces each such sequence by a token consisting of the following:

* the number of characters in the sequence, and
* the repeating character.

If a character does not repeat, it appears as a single character in the compressed string with no number preceding it.

For example, consider the following example.

* **Original string**: qwwwwwwwwweeeeerrtyyyyyqqqqwEErTTT

* **RLE string:** q9w5e2rt5y4qw2Er3T

In the RLE (or compressed) string, 'q' represents single 'q' character, '9w' represents a sequence of 9 consecutive 'w' characters, '5e' represents 5 consecutive 'e' characters, 't' represents a single 't' character, etc.

## 1.1 Your objective

You will write two functions `rle_encode()` and `rle_decode` to encode (compress) and decode (decompress) strings. 

**Note:** When encoding a string in the `rle_encode()` function, assume that the string will only consist of lowercase (a-z) and uppercase characters (A-Z)

## 1.2 Write your code.
"""

def rle_encode(s):
    """
    Encodes the string s by finding sequences 
    in the string where the same character repeats.
    Replace each such sequence by a token consisting 
    of the number of characters in the sequence 
    followed by the repeating character. 
    
    rle_encode returns the encoded string.

    Parameters:
        s (str): the string to run-length encode. It
                    will only consist of lowercase (a-z)
                    and uppercase characters (A-Z).

    Returns:
        str: the run-length encoded string

    Examples:
        rle_encode('aaaaa') returns 5a
        rle_encode('qwwwwwwwwweeeeerrtyyyyyqqqqwEErTTT') returns 'q9w5e2rt5y4qw2Er3T'
    """

    rle = ''
    l = ''
    c = 0
    n = 0
    prev_letter = s[0]


    while n != len(s):
      l = s[n]
      if prev_letter == l:
          c += 1
      else:
        if c != 1:
          rle += str(c) + prev_letter
        else:
          rle += prev_letter
        c = 1
      prev_letter = l
      n += 1

    if c != 1:
      rle += str(c) + str(prev_letter)
    else:
      rle += str(prev_letter)

    return rle

    
def rle_decode(s):
    """
    Decodes a run-length encoded string s.
    Returns the decoded string.

    Parameters:
        s (str): a run-length encoded string.

    Returns:
        str: the decoded string

    Examples:
        decode('a5') returns 'aaaaa'
        decode('q9w5e2rt5y4qw2Er3T') returns 'qwwwwwwwwweeeeerrtyyyyyqqqqwEErTTT'
    """

    #add your code

    m = -1
    q = 0
    p = 1
    digits = ['2', '3', '4', '5', '6', '7', '8', '9']
    new_s = ''

    if s[0] not in digits:
      new_s += s[0]

    while q < len(s) - 1:  
      if s[q] in digits:
        new_s += s[p] * int(s[q])
      elif s[q] not in digits and s[p] not in digits:
        new_s += s[p]
      q += 1
      p += 1
      m += 1

    return new_s

"""## 1.3 Write your tests."""

# Add your tests.

assert rle_decode('2a3bj') == 'aabbbj'
assert rle_decode('eu4j') == 'eujjjj'
assert rle_encode('tttoooj') == '3t3oj'
assert rle_encode('thhhmmm') == 't3h3m'

print('Niice')

"""# 2 Compression Percentage

Given a string `aaaaaaabtaaaa`, the run-length encoding `7abt4a`. We can calculate the resulting data compression ration, which is the length of the run-length-encoded (RLE) string divided by the length of original string. In our example above, the compression ratio, would be $$\frac{6}{13} \times 100 = 46\%.$$ This means that the RLE algorithm compresses the input to 46% of its original size. The smaller the ratio, the better the encoding or compression.

**Your objective:** Write a program that asks the user for a string of letters to encode. The program then outputs the run-length encoded string and the compression percentage.

## 2.1 Examples

**Example #1**

```
String to encode: AAAAAAAAAAA

Run-length encoding: 11A
Compression percentage: 27%
```
*Explanation of output.* The user is prompted for a string to encode and user enters `AAAAAAAAAAA` (line 1). Afterwards, the program prints the RLE string and compression ratio (lines 3 - 4).

**Example #2**

```
String to encode: aaaaaaaBtAAA 

Run-length encoding: 7aBt3A
Compression percentage: 50% 
```

*Explanation of output.* The user is prompted for a string to encode and user enters `aaaaaaaBtAAA` (line 1). Afterwards, the program prints the RLE string and compression ratio (lines 3 - 4).

## 2.2 Write your code.
"""

# Add code

s = input('String to encode: ')

print()

print('Run-length encoding:', rle_encode(s))

ratio = (len(rle_encode(s)) / len(s)) * 100

print('Compression percentage: ' + str(round(ratio)) + '%')

"""## 2.3 You're done with this problem. 

Showing test code is not necessary for this probelm.

# 3 File Statistics

Write a program that analyzes and prints file statistics. First, prompt the user for the name of a file. Then, read and analyze the file and display the following statistics: total number
of characters, number of sentences, and number of words.

Below is additional information regarding the above statistics you will collect. 

* A **character** is any symbol in the text file. Examples of characters
include letters, numerical digits, punctuation marks, and "invisible"
characters such as whitespace and newline characters. 

* Assume a **word** is separated by whitespace and/or newline characters. 

* Assume a **sentence** ends in either a period, question mark, or exclamation point.

## 3.1 Programming tips

1. You'll need to take advantage of the `strip()` and `split()` functions for strings. We discussed `strip()` in class. 

    Sometimes we want to split a string into a list of pieces, where each piece is a string. One application of split is to split a sentence into invidual words, where words are separated by whitespace characters.

    The following code provides an example of how to use the `strip()` method.

    ```python

    # Example #1. Split a string by whitespace 
    # character (e.g., space, tab, newline). 
    # This is the default behavior of the split() 
    # function, which is why there is no parameter inside 
    # the split function parentheses. (Note: See Example #2 
    # for an example of a parameter for the split() function.)
    sentence = 'jack and jill went up the hill'
    sentence_split_list = sentence.split()
    print(sentence_split_list) # print ['jack',  'and', 'jill', 'went', 'up', 'the', 'hill']

    # Example #2. Split a string based on a comma (',').
    s = 'a,b,c'
    s_split_list = s.split(',')
    print(s_split_list) # prints ['a', 'b', 'c']

    # Example #3. Split a string based on variable whitespace between characters. split() works for this case as well.
    t = '10   20        30'
    t_split_list = t.split()
    print(t_split_list) # prints ['10', '20', '30']
    ```

2. The text files `gettysburg.txt` and `five-letter-words.txt` have been provided to test your program.  Make sure these files are in your Google Drive in the directory `My Drive/Colab Notebook`.

3. Remember that your code must be composed of several user-defined functions and be well-documented.

## 3.2 Examples

**Example #1**

*Explanation of output.* The user enters the filename `five-letter-words.txt`(line 1).  The output of the program is then displayed (lines 3--5).
```
Filename: five-letter-words.txt

Characters: 16500
Sentences: 0
Words: 2750
```

**Example #2** 

*Explanation of output.* The user enters the filename `gettysburg.txt` (line 1).  The output of the program is then displayed (lines 3--5).
```
Filename: gettyburg.txt

Characters: 1447
Sentences: 10
Words: 267
```

## 3.3 Write your code.
"""

# Mount Google Drive to Colab
from google.colab import drive
drive.mount('/content/gdrive')

# Add your code.

def analyze_file():
  """
  takes as an input the name of a file then analyzes the text to find its number of characters, sentences, and words

  Returns: string and integers representing the above
  """

  file = input('Filename: ')

  print()

  with open('/content/gdrive/My Drive/Colab Notebooks/' + file, 'r') as p:
      list_of_lines = p.readlines()

  characters = 0

  for w in list_of_lines:            #counts the number of characters by taking the len of each line after using readlines
    char = len(w)
    characters += char


  stripped_lines = []


  for w in list_of_lines:           #counts words by splitting the lines by whitespace characters
    stripped_lines += w.split()


  list_of_items = ['.', '!', '?']
  count = 0

  for w in list_of_lines:           #counts sentences by counting one for every end of sentence character in the file
    for character in w:
      if character in list_of_items:
        count += 1

  return print('Characters:', characters, '\nSentences:', count, '\nWords:', len(stripped_lines))         #uses length of list of split words as the number of words

"""## 3.4 Test your code."""

# Add your test code.

"""To test the code, I ran the function with different text files as inputs and checked to see if it gave the correct amount for each.

# 4 Counting Syllables

Write a function `count_syllables()`, which has a string parameter `word`, where the function calculates the number of syllables in the parameter `word`.  

It's difficult to determine the exact number of syllables in a word just from the spelling. Therefore, use the following heuristic. 

1. Count the groups of adjacent vowels (aeiouy) in the word.  (Yes, the letter 'y' is considered a vowel for this problem.) For example, "Creighton" has two syllables, "University" has five syllables, and "sea" has one syllable. 
    
2. If 'e' is the last letter in a word and is preceded by a non-vowel, then it does not count as a syllable (i.e., the 'e' is silent). For example, "life" has only one syllable, while "alumnae" has three syllables. 
    
3. Notice that under the definitions (1) and (2), the word "me" would have zero syllables since the 'e' at the end of the word is not considered a syllable. To address this, always report that there is at least one syllable in any input word.

## 4.1 Our heuristic is not 100% accurate. 

Our syllable counting heuristic does a good job of counting syllables. However, for some words, gives an incorrect syllable count.

A few examples are shown in the following table.

 word | our heuristic | correct number |  
 :--| :---: | :---: 
 syllable | 2 | 3
 nimble | 1 | 2
 apple | 1 | 2

 The word "syllable" consists of 3 syllables, but our heuristic says it requires 2 syllables. Similarly, the words "nimble" and "apple" require 2 syllables, but our heuristic reports 1 syllable instead.

## 4.2 Programming tip

* Your code must assume that the string data is case-insensitive. Thus, your `count_syllables()` should report 3 syllables for the strings "Unity", "UNity", "UniTy", "unItY", or "unity".  To handle this situation, either convert the word into lowercase or uppercase characters.

* If needed, it's fine for your code to contain user-defined functions in addition to `count_syllables`. 

* Make sure that your code is well-documented.

## 4.3 Write your code.
"""

def count_syllables(word):
    """
    Returns the number of syllables in the string word.
    This function uses the following heuristic for syllable counting.
        (1) Count the groups of adjacent vowels (aeiouy) in the word.
        (2) If 'e' is the last letter in a word and is preceded by a 
            non-vowel, then it does not count as a syllable (i.e., the 'e' 
            is silent).
        (3) Report that there is at least one syllable in 
            the string word.

    Parameters:
        word (str): the string that will be used by our syllable
                    counting heuristic

    Returns:
        int: the number of syllables in the string parameter word

    Examples:
        count_syllables('UniTy') returns 3
        count_syllables('me') returns 1
    """

    # Add code

    s = word.upper()
    answer = 0
    p = 0

    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']

    if s[0] in vowels:
      answer += 1

    while p < len(s):
      if s[p] in vowels and s[p - 1] not in vowels:
        answer += 1
      p += 1
    if s[-1] == 'E' and s[-2] not in vowels:
      answer -= 1
    
    if answer == 0:
      answer = 1

    return answer

"""## 4.4 Test your code.

Think about how the heuristic works and choose test words that ensure your code correctly implements the heuristic. 

Your goal is to test that your function produces values that agree with the heuristic described above. 
Don't worry if for some words the `count_syllables()` function gives a correct heuristic value, which is not the actual number of syllables (see Section 4.1). 


"""

# Add your tests.

assert count_syllables('anatomy') == 4
assert count_syllables('resume') == 2   #under the this heuristic this should only have 2 even though it should have 3 really
assert count_syllables('anthropology') == 5

print('Good')

"""# 5 Flesch Reading Index

Write a program that computes the Flesch index and reading level for words of a text file or document.  

The Flesch readability index was invented by Dr. Rudolf Flesch as a tool for estimating how difficult a document is to read and comprehend. The index does not consider the meaning of words, only their lengths and the lengths of sentences, in order to assign a readability index to the document. The higher the readability index, the easier a document is to comprehend. 

Flesch readability indexes are often translated into the educational level that is usually necessary to understand a document, as shown in the table below.

Flesch Index (F) | Grade Level (G) | Example
:-- | :-- | :--
> 90 to 100 | 5th grader | Comics
> 80 to 90 | 6th grader | Consumer ads
> 70 to 80 | 7th grader | Alice in Wonderland
> 65 to 70 | 8th grader | Sports Illustrated
> 50 to 65 | High school student | Time Magize
> 30 to 50 | College student | New York Times
0 to 30 | College graduate | Auto insurance
< 0 | Law school graduate | IRS tax code

Flesch's formula to calculate the index $F$ as follows.
$$F  = 206.835 - 1.015 \times \frac{\text{total  words}}{ \text{total sentences}} - 84.6 \times \frac{\text{total syllables}}{\text{total words}}$$ 

To compute $F$, use the following definitions for word, sentence, and syllable.

* ***word:*** Any sequence of non-whitespace characters that contain at least one letter or digit.
    
* ***sentence:*** A period, question mark, exclamation point, colon, or semicolon defines a sentence.
    
* ***syllable:*** Use the definition given in Problem #4 of this assignment. 

Once $F$ is computed, the Flesch Grade Level ($G$) is determined based on the table given earlier. For example, a Flesch index of 53.4 means that a high school student can comprehend the document.

Note that all of these definitions are approximations. For example, an ellipsis ("...") will count as three sentences.  But, that's ok.  For your program, use the above definitions and you will have a good approximation of the Flesch Index ($F$) and Flesch Grade Level ($G$) of a text file (or document).

## 5.1 Examples

**Example #1**

```
Filename: sixth-grade.txt

Syllables: 37
Words: 29
Sentences: 2
Words per Sentence: 14.5
Syllables per Word: 1.3

Flesch Index: 84.2
Flesch Grade: 6th grader
```
*Explanation of output.* The user enters the filename `sixth-grade.txt` (line 1). The output of the program  then shows various statistics about the file: the number of syllables, words, sentences, words per sentence, and syllables per word (lines 3-7).  The program then uses these values to compute the Flesch index and grade level (lines 9-10).

**Example #2**

```
Filename: college.txt

Syllables: 31
Words: 15
Sentences: 1
Words per Sentence: 15.0
Syllables per Word: 2.1

Flesch Index: 16.8
Flesch Grade: College graduate
```
*Explanation of output.* The user enters the filename `college.txt` (line 1). The output of the program is then displayed (lines 3-10).

**Example #3**

```
Filename: gettysburg.txt

Syllables: 400
Words: 282
Sentences: 44
Words per Sentence: 6.4
Syllables per Word: 1.4

Flesch Index: 80.3
Flesch Grade: 6th grader
```
*Explanation of output.* The user enters the filename `gettysburg.txt` (line 1). The output of the program is then displayed (lines 3-10).

## 5.1 Programming Tips

Similarly to Problem 4, make sure to transform all words into either lowercase or uppercase characters before counting syllables. And, don't forget to remove all ending punctuation from words as well. Otherwise, your syllable count may be incorrect. 

Remember, once you've identified a sequence of characters representing a word, it has to have at least one syllable.  So, by this definition "1234" would be a word that has one syllable.

## 5.2 Additional Examples

If you want additional files to test your code, try your program on the provided text files `green-eggs-and-ham.txt` and `semiotics.txt`. Or, put something you've written (e.g., an essay, a poem, a tweet) into a text file and calculate its Flesch index.

## 5.3 Write your code.
"""

# Add your code

def flesch():
  """
  Returns the syllable, word, and sentence count of a file given by user, as well as the words per sentence and syllables per word ratios, and the Flesch Index and Flesch Grade of the document
  
  Returns: lines of strings and integers with the above
  """



  file = input('Filename: ')

  print()

  with open('/content/gdrive/My Drive/Colab Notebooks/' + file, 'r') as p:
      list_of_lines = p.readlines()



  stripped_lines = []


  for w in list_of_lines:                  #split the lines based on whitespace to seperate into words and add to a list
    stripped_lines += w.split()

  words = len(stripped_lines)              #count the length of the word list as the number of words


  list_of_items = ['.', '!', '?']          #characters to look for that end a sentence
  count = 0

  for w in list_of_lines:                   #count a sentence for every time an end of sentence character is found
    for character in w:
      if character in list_of_items:
        count += 1

  total_syllables = 0
 
  for word in stripped_lines:                      #use the count_syllables function for every word in our list of words, stripped_lines
    total_syllables += count_syllables(word)


  words_per_sentence = round(words / count, 1)       #make a variable for the ratio of words per sentence

  syllables_per_word = round(total_syllables / words, 1)      #make a variable for the ratio of syllables per word 

  flesch_index = round(206.835 - 1.015 * words_per_sentence - 84.6 * syllables_per_word, 1)      #calculate the index based on the formula given

  

  if 100 >= flesch_index >= 90:           #this creates a variable for the grade based on the number of the index as given in the table
    grade = '5th grader'
  if 90 > flesch_index >= 80:
    grade = '6th grader'
  if 80 > flesch_index >= 70:
    grade = '7th grader'
  if 70 > flesch_index >= 65:
    grade = '8th grader'
  if 65 > flesch_index >= 50:
    grade = 'High school student'
  if 50 > flesch_index >= 30:
    grade = 'College student'
  if 30 > flesch_index >= 0:
    grade = 'College graduate'    
  if flesch_index < 0:
    grade = 'Law school graduate'

  
  return print('Syllables:', total_syllables, '\nWords:', words, '\nSentences:', count, '\nWords per Sentence:', words_per_sentence, '\nSyllables per Word:', syllables_per_word, '\n\nFlesch Index:', flesch_index, '\nFlesch Grade:', grade)


flesch()

"""## 5.4 Write your tests."""

# Add your tests

"""To test the function, I ran the function and inputed several different text files to see if the results were correct with each file.

## 5.5 Design and Testing

Please discuss how you designed and tested your code to compute the Flesch reading index. Feel free to provide any additional insights related to this problem.

To design the code I used a foundation based on the problems before, counting syllables, words, and sentences for a text file. I had to use the syllables function in combination with the code for words, running it for every word in the list created. The rest was a matter of doing the right calculations with the right variables created, and then writing the correct if functions to decide which flesch grade it is.

# 6 EXTRA CREDIT

In your Excursions course, we covered the basics of the C programming language. For extra credit, you will write a C program for the Hailstone problem from Assignment #5. 

* You will use `repl.it` to write your C code. You will provide a a link to your code in Section 6.2.

* Starter code has been provided for you at the URL below.
https://repl.it/@drwilliams/hailstoneC#main.c

    To edit, select the option to *fork* the code in `repl.it` to your user account.

Your C program will consists of two functions.
* `main()`: This function is the main driver of the program. It has been written for you. PLEASE DO NOT MODIFY.

* `hailstone()`: This fuction will print the sequence of numbers generated by the hailstone algorithm. This function has a single parameter `n`, which is a positive integer $\geq $1. 

As a reminder, the hailstone algorithm generates a sequence of numbers based on the following procedure.

1. Start with an integer $n \geq 1$.

2. If  $n$ is even, divide by 2.

3. Otherwise,  $n$ is odd. Multiply by 3 and add 1.

4. Repeat steps 1 to 3 with the new value of $n$ , terminating when  $n=1$.

Your hailstone function will execute the above algorithm and print out the sequence of numbers generated.

## 6.1 Examples

**Example #1**

```
Enter an integer: 4

4, 2, 1
```

*Explanation of output.* The user enters the integer `4` at the prompt (line 1). Afterwards, the program prints the resulting hailstone sequence (line 3).

**Example #2**

```
Enter an integer: 12

12, 6, 3, 10, 5, 16, 18, 4, 2, 1
```
*Explanation of output.* The user enters the integer `12` at the prompt (line 1). Afterwards, the program prints the resulting hailstone sequence (line 3).

## 6.2 Your code

Please provide the URL to your hailstone code.

## 6.3 Reflection

Please discuss your experience writing a C program to solve this problem. Additionally, include a comparison of the C and Python code for this problem. Do you have a preference for one language over other? If so, please explain why.
"""